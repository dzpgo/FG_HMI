using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using UACSDAL;
using Baosight.iSuperframe.Common;
using Baosight.iSuperframe.Authorization.Interface;
using UACSControls;

namespace UACSControls
{
    public partial class conArea : UserControl
    {
        //跳转画面
        private Baosight.iSuperframe.Authorization.Interface.IAuthorization auth;
        private Label lbl = new Label();
        private AreaInfo areaInfo = new AreaInfo();
        private AreaBase areaBase = new AreaBase();
        private AreaRowInfo rowInfo = new AreaRowInfo();
        private static FrmSaddleShow frmSaddleShow = null;
        private bool isCreateLbl = false;
        private string lblRuler;

        public conArea()
        {
            InitializeComponent();
            this.Load += conArea_Load;
        }

        protected override CreateParams CreateParams
        {
            get
            {
                var parms = base.CreateParams;
                parms.Style &= ~0x02000000; // Turn off WS_CLIPCHILDREN 
                return parms;
            }
        }
        void conArea_Load(object sender, EventArgs e)
        {
            auth = FrameContext.Instance.GetPlugin<IAuthorization>() as IAuthorization;
        }



        public delegate void areaRefreshInvoke(AreaBase theSaddle, long baySpaceX, long baySpaceY, int panelWidth, int panelHeight, bool xAxisRight, bool yAxisDown, Panel panel, conArea _conArea);

        public void refreshControl(AreaBase theSaddle, long baySpaceX, long baySpaceY, int panelWidth, int panelHeight, bool xAxisRight, bool yAxisDown, Panel panel, conArea _conArea)
        {
            try
            {
                areaBase = theSaddle;

                //计算X方向上的比例关系
                double xScale = Convert.ToDouble(panelWidth) / Convert.ToDouble(baySpaceX);

                double location_X = 0;
                if (xAxisRight == true)
                {
                    location_X = Convert.ToDouble(theSaddle.X_Start) * xScale;
                }
                else
                {
                    location_X = Convert.ToDouble(baySpaceX - (theSaddle.X_End)) * xScale;
                }
                //计算y方向上的比例关系
                double yScale = Convert.ToDouble(panelHeight) / Convert.ToDouble(baySpaceY);

                double location_Y = 0;
                if (yAxisDown == true)
                {
                    location_Y = Convert.ToDouble(theSaddle.Y_Start) * yScale;
                }
                else
                {
                    location_Y = Convert.ToDouble(baySpaceY - (theSaddle.Y_End)) * yScale;
                }
                if (location_Y < 0)
                {
                    location_Y = 0;
                }

                //定位库区的坐标
                this.Location = new Point(Convert.ToInt32(location_X), Convert.ToInt32(location_Y));

                //设置鞍座控件的宽度
                this.Width = Convert.ToInt32((theSaddle.X_End - theSaddle.X_Start) * xScale);
                //设置鞍座控件的高度
                this.Height = Convert.ToInt32((theSaddle.Y_End - theSaddle.Y_Start) * yScale);


                //当控件的宽小于1时 不显示控件
                if (this.Width < 1)
                {
                    this.Visible = false;
                }               
                if (theSaddle.AreaType == 0)
                {
                    int saddleNum = areaInfo.getAreaSaddleNum(areaBase.AreaNo);
                    int saddleNoCoilNum = areaInfo.getAreaSaddleNoCoilNum(areaBase.AreaNo);
                    int saddleCoilNum = areaInfo.getAreaSaddleCoilNum(areaBase.AreaNo);

                    if (theSaddle.AreaNo.Contains("WJ"))
                    {
                        if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 0)
                            this.BackColor = System.Drawing.Color.Red;
                        else if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Blue;
                        else if (theSaddle.AreaDoorSefeValue == 0 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Yellow;
                        else
                            this.BackColor = System.Drawing.Color.MediumAquamarine;
                        //this.BackColor = System.Drawing.Color.FromArgb(53, 253, 220);
                    }
                    else
                    {
                        if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 0)
                            this.BackColor = System.Drawing.Color.Red;
                        else if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Blue;
                        else if (theSaddle.AreaDoorSefeValue == 0 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Yellow;
                        else
                            this.BackColor = System.Drawing.Color.MediumAquamarine;
                    }

                    if (!isCreateLbl)
                    {
                        if (!theSaddle.AreaNo.Contains("WJ") && !theSaddle.AreaNo.Contains("D108"))
                        {
                            lbl.Name = theSaddle.AreaNo;
                            lbl.BackColor = Color.MediumAquamarine;
                            lbl.Font = new System.Drawing.Font("微软雅黑", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(132)));
                            lbl.Width = 75;
                            lbl.Height = 75;
                            lbl.ForeColor = Color.Black;
                            lbl.Click += conArea_Click;
                            _conArea.Controls.Add(lbl);

                            //List<int> list = rowInfo.getAreaNoRow(areaBase.AreaNo) as List<int>;
                            //lblRuler = rowInfo.getAreaRowsInfo(list);

                            isCreateLbl = true;
                        }

                        //lbl.Name = theSaddle.AreaNo;
                        //lbl.BackColor = Color.MediumAquamarine;
                        //lbl.Font = new System.Drawing.Font("微软雅黑", 7F, System.Drawing.FontStyle.Bold,System.Drawing.GraphicsUnit.Point, ((byte)(134)));
                        ////lbl.Width = 95;
                        ////lbl.Height = 100;
                        //lbl.Width = 90;
                        //lbl.Height = 100;
                        //lbl.ForeColor = Color.Black;                       
                        // _conArea.Controls.Add(lbl); 


                        List<int> list = rowInfo.getAreaNoRow(areaBase.AreaNo) as List<int>;
                        lblRuler = rowInfo.getAreaRowsInfo(list);
                        foreach (int i in rowInfo.getRowColListByAreaNO(areaBase.AreaNo))
                        {
                            LogManager.WriteProgramLog("RowColList>>>>>>>>" + i);
                        }

                        isCreateLbl = true;
                      
                    }
                    if (panel.Width < 1400)
                    {
                        lbl.Width = 60;
                        lbl.Height = 20;
                        lbl.Text = lblRuler;
                        lbl.Location = new Point(this.Width / 2 - 30, this.Height / 2);
                    }
                    else
                    {
                        lbl.Width = 75;
                        lbl.Height = 75;
                        if ((!areaBase.AreaNo.Contains("PACK")) && (!areaBase.AreaNo.Contains("END")) && (!areaBase.AreaNo.Contains("WJ")) && (!theSaddle.AreaNo.Contains("D108")))
                        {
                            lbl.Text = "鞍座总数：" + saddleNum + "\n"
                              + "白库位：   " + saddleNoCoilNum + "\n"
                              + "黑库位：   " + saddleCoilNum + "\n"
                              + "红库位：   " + (saddleNum - saddleNoCoilNum - saddleCoilNum) + "\n"
                              + lblRuler;
                        }
                        if (!areaBase.AreaNo.Contains("Z02-P") && !areaBase.AreaNo.Contains("Z03-C"))
                        {
                            //int RowNum = getRowNum(areaBase.AreaNo);
                            //label1.Visible = false;
                            //if (saddleNoCoilNum < (RowNum + 3))
                            //{
                            //    label1.Visible = true;
                            //    label1.Text = "当前白库位过少，请及时转库！";
                            //    label1.Location = new Point(this.Width / 2 - 90, this.Height - 20);
                            //}

                        }

                        //}
                        //设置显示的颜色
                        //this.BackColor = Color.MediumAquamarine;
                        //if (areaBase.AreaNo == "Z23-E")
                        //{
                        //    lbl.Location = new Point(this.Width / 2 - 30, this.Height * 7 / 10 + 28);
                        //}
                        if (areaBase.AreaNo == "Z23-A" || areaBase.AreaNo == "Z23-B" || areaBase.AreaNo == "Z23-C" || areaBase.AreaNo == "Z21-I" || areaBase.AreaNo == "Z21-J")
                        {
                            lbl.Location = new Point(this.Width / 2 - 30, 30);
                        }
                        else if((areaBase.AreaNo == "Z07-A"))
                        {
                            lbl.Location = new Point(this.Width / 2 - 30, 100);
                        }
                        else if (areaBase.AreaNo.Contains("PR"))
                        {
                            lbl.Location = new Point(2, this.Height / 2 - 30);
                        }
                        else
                        {
                            lbl.Location = new Point(this.Width / 2 - 30, this.Height / 2 - 40);
                        }

                    }
                    lbl.BackColor = this.BackColor;
                    //this.SendToBack();
                    if (areaBase.AreaNo == "Z07-A" || areaBase.AreaNo == "Z23-C" || areaBase.AreaNo == "Z23-E" || areaBase.AreaNo == "Z23-G" || areaBase.AreaNo == "Z23-L" || areaBase.AreaNo == "Z21-F" || areaBase.AreaNo == "Z23-H")
                    {
                        this.SendToBack();
                    }
                }
                else if (theSaddle.AreaType == 3 )
                {
                    this.BackColor = Color.MediumAquamarine;
                    Graphics gr = this.CreateGraphics();
                    if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 0)
                    {
                        //Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        //gr.DrawRectangle(new Pen(Color.Red, 2), rec);              
                        this.BackColor = Color.Red;
                    }
                    else if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 1)
                    {
                        //Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        //gr.DrawRectangle(new Pen(Color.Blue, 2), rec);
                        this.BackColor = Color.Blue;
                    }
                    else if (theSaddle.AreaDoorSefeValue == 0 && theSaddle.AreaDoorReserveValue == 1)
                    {
                        //Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        //gr.DrawRectangle(new Pen(Color.Yellow, 2), rec);
                        this.BackColor = Color.Yellow;
                    }
                }
                else if (theSaddle.AreaType == 4)
                {
                    this.BackColor = Color.MediumPurple;
                    Graphics gr = this.CreateGraphics();
                    if (theSaddle.AreaNo.Contains("MC"))
                    {
                        this.BackColor = Color.SpringGreen;
                        if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 0)
                            this.BackColor = System.Drawing.Color.Red;
                        else if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Blue;
                        else if (theSaddle.AreaDoorSefeValue == 0 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Yellow;
                        else
                            this.BackColor = System.Drawing.Color.SpringGreen;
                    }
                    if (theSaddle.AreaNo.Contains("WC")|| theSaddle.AreaNo.Contains("EL"))
                    {
                        if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 0)
                            this.BackColor = System.Drawing.Color.Red;
                        else if (theSaddle.AreaDoorSefeValue == 1 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Blue;
                        else if (theSaddle.AreaDoorSefeValue == 0 && theSaddle.AreaDoorReserveValue == 1)
                            this.BackColor = System.Drawing.Color.Yellow;
                        else
                            this.BackColor = System.Drawing.Color.MediumPurple;                      
                    }
                    if (areaBase.AreaNo == "D108-WC")
                    {
                        this.SendToBack();
                    }                   
                }
                else if (theSaddle.AreaType == 5)
                {
                    this.BackColor = Color.MediumSlateBlue;
                    Graphics gr = this.CreateGraphics();
                    if (theSaddle.AreaNo.Contains("WR"))
                    {
                        if (theSaddle.AreaDoorSefeValue == 1)
                        {
                            this.BackColor = Color.Red;
                        }                 
                    }

                }
                else if (theSaddle.AreaType == 1)
                {
                    this.BackColor = Color.CadetBlue;
                }
                else
                {
                    //this.BackColor = Color.Beige;
                    if(theSaddle.AreaNo.Contains("MC"))
                    {
                        this.BackColor = Color.SpringGreen;
                    }
                    else
                    {
                        this.BackColor = Color.MediumSlateBlue;                        
                    }
                    
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteProgramLog(ex.Message);
                LogManager.WriteProgramLog(ex.StackTrace);
            }
        }
        public delegate void EventHandler_Saddle_Selected(AreaBase theSaddleInfo);
        public event EventHandler_Saddle_Selected Saddle_Selected;
    
        private void conArea_Paint(object sender, PaintEventArgs e)
        {
            try
            {

                Graphics gr = e.Graphics;
                Pen p = new Pen(Color.White, 2);

                if (areaBase.AreaType == 0)
                {
                     
                    if (areaBase.AreaNo == "Z23-L")
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 14, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 20));

                        ////Z06 - B
                        //Point p1 = new Point(0, 0);
                        //Point p2 = new Point(this.Width, 0);
                        //Point p3 = new Point(this.Width, this.Height / 7);
                        //Point p4 = new Point(this.Width * 19 / 22, this.Height / 7);
                        //Point p5 = new Point(this.Width * 19 / 22, this.Height);
                        //Point p6 = new Point(0, this.Height);
                        //Point[] points = { p1, p2, p3, p4, p5, p6 };
                        //gr.DrawPolygon(p, points);
                        //Brush bush = new SolidBrush(Color.LightSteelBlue);
                        //gr.FillRectangle(bush, this.Width * 19 / 22, this.Height / 7, this.Width - this.Width * 19 / 22, this.Height - this.Height / 7);

                        //Z06 - A
                        Point p1 = new Point(0, 0);
                        Point p2 = new Point(this.Width, 0);
                        Point p3 = new Point(this.Width, this.Height);
                        Point p4 = new Point(this.Width - (this.Width * 10500 / 48370), this.Height);
                        Point p5 = new Point(this.Width - (this.Width * 10500 / 48370), this.Height - (this.Height * 2650 / 21615));
                        Point p6 = new Point(0, this.Height - (this.Height * 2650 / 21615));
                        Point[] points = { p1, p2, p3, p4, p5, p6 };
                        gr.DrawPolygon(p, points);

                        //Brush bush = new SolidBrush(Color.LightSteelBlue);
                        //gr.FillRectangle(bush, 0, this.Height - (this.Height * 2650 / 21615), this.Width * 37870 / 48370, this.Height * 2650 / 21615);                    
                    }
                    //else if (areaBase.AreaNo == "Z23-E")
                    //{
                    //    gr.DrawString(areaBase.Area_Name,
                    //           new Font("微软雅黑", 14, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, this.Height * 7 / 10));
                    //    Point p1 = new Point(0, 0);
                    //    Point p2 = new Point(this.Width / 5, 0);
                    //    Point p3 = new Point(this.Width / 5, this.Height * 7 / 10);
                    //    Point p4 = new Point(this.Width, this.Height * 7 / 10);
                    //    Point p5 = new Point(this.Width, this.Height);
                    //    Point p6 = new Point(0, this.Height);
                    //    Point[] points = { p1, p2, p3, p4, p5, p6 };
                    //    gr.DrawPolygon(p, points);

                    //    Brush bush = new SolidBrush(Color.LightSteelBlue);
                    //    gr.FillRectangle(bush, this.Width / 5, 0, this.Width - this.Width / 5, this.Height * 7 / 10);
                    //}
                    else if (areaBase.AreaNo == "Z23-H")
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 12, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 20));
                        Point p1 = new Point(0, 0);
                        Point p2 = new Point(this.Width, 0);
                        Point p3 = new Point(this.Width, this.Height);
                        Point p4 = new Point(this.Width * 5 / 8 - 1, this.Height);
                        Point p5 = new Point(this.Width * 5 / 8 - 1, this.Height * 5 / 7 - 2);
                        Point p6 = new Point(this.Width / 2 - 2, this.Height * 5 / 7 - 2);
                        Point p7 = new Point(this.Width / 2 - 2, this.Height);
                        Point p8 = new Point(0, this.Height);
                        Point[] points = { p1, p2, p3, p4, p5, p6, p7, p8 };
                        gr.DrawPolygon(p, points);

                    }
                    else if (areaBase.AreaNo == "Z21-F")
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 12, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 20));
                        Point p1 = new Point(0, 0);
                        Point p2 = new Point(this.Width * 2 / 3 - 3, 0);
                        Point p3 = new Point(this.Width * 2 / 3 - 3, this.Height / 4 + 23);
                        Point p4 = new Point(this.Width * 3 / 4 - 2, this.Height / 4 + 23);
                        Point p5 = new Point(this.Width * 3 / 4 - 2, 0);
                        Point p6 = new Point(this.Width, 0);
                        Point p7 = new Point(this.Width, this.Height);
                        Point p8 = new Point(0, this.Height);
                        Point[] points = { p1, p2, p3, p4, p5, p6, p7, p8 };
                        gr.DrawPolygon(p, points);
                    }
                    else if (areaBase.AreaNo == "Z07-A")
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 12, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 20));
                        Point p1 = new Point(0, 0);
                        Point p2 = new Point(this.Width, 0);
                        Point p3 = new Point(this.Width, this.Height * 4 / 9);
                        Point p4 = new Point(this.Width * 9 / 24, this.Height * 4 / 9);
                        Point p5 = new Point(this.Width * 9 / 24, this.Height);
                        Point p6 = new Point(0, this.Height);
                        Point[] points = { p1, p2, p3, p4, p5, p6 };
                        gr.DrawPolygon(p, points);
                        Brush bush = new SolidBrush(Color.LightSteelBlue);
                        gr.FillRectangle(bush, this.Width * 9 / 24, this.Height * 4 / 9, this.Width - this.Width * 9 / 24, this.Height - this.Height * 4 / 9);
                    }
                    else if (areaBase.AreaNo == "Z23-A" || areaBase.AreaNo == "Z23-B" || areaBase.AreaNo == "Z23-C" || areaBase.AreaNo == "Z21-I" || areaBase.AreaNo == "Z21-J")
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 12, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 0));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                    else if (areaBase.AreaNo.Contains("WJ"))
                    {
                        gr.DrawString(areaBase.Area_Name,
                           new Font("微软雅黑", 7, FontStyle.Bold), Brushes.Black, new Point(6, 3), new StringFormat(StringFormatFlags.DirectionVertical));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                    //else if (areaBase.AreaNo.Contains("PR"))
                    //{
                    //    gr.DrawString(areaBase.Area_Name,
                    //       new Font("微软雅黑", 9, FontStyle.Bold), Brushes.Black, new Point(this.Width / 3, 3), new StringFormat(StringFormatFlags.DirectionVertical));
                    //    Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                    //    gr.DrawRectangle(p, rec);
                    //}
                    else if (areaBase.AreaNo.Contains("D112"))
                    {
                        //gr.DrawString(areaBase.Area_Name,
                        //   new Font("微软雅黑", 9, FontStyle.Bold), Brushes.Black, new Point(this.Width / 3, 3), new StringFormat(StringFormatFlags.DirectionVertical));
                        //Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        //gr.DrawRectangle(p, rec);

                        gr.DrawString(areaBase.Area_Name,
                           new Font("微软雅黑", 9, FontStyle.Bold), Brushes.Black, new Point(2, 3));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                    else if (areaBase.AreaNo.Contains("D108"))
                    {
                        gr.DrawString(areaBase.Area_Name,
                           new Font("微软雅黑", 9, FontStyle.Bold), Brushes.Black, new Point(this.Width / 3, 3), new StringFormat(StringFormatFlags.DirectionVertical));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                    else if (areaBase.AreaNo.Contains("D208-PR1"))
                    {
                        gr.DrawString(areaBase.Area_Name,
                           new Font("微软雅黑", 9, FontStyle.Bold), Brushes.Black, new Point(2, 3));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                    else
                    {
                        gr.DrawString(areaBase.Area_Name,
                               new Font("微软雅黑", 12, FontStyle.Bold), Brushes.Black, new Point(this.Width / 2 - 30, 20));
                        //        //创建矩形对象                左上角度座标                 宽   高  
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(p, rec);
                    }
                }
                else if (areaBase.AreaType == 1)
                {
                    if(areaBase.AreaNo.Contains("Z21"))
                    {
                        e.Graphics.DrawString(areaBase.Area_Name, new Font("微软雅黑", 12, FontStyle.Regular),new SolidBrush(Color.Black), 1, this.Height - 70, new StringFormat(StringFormatFlags.DirectionVertical));
                    }
                    else if (areaBase.AreaNo.Contains("Z23"))
                    {
                        e.Graphics.DrawString(areaBase.Area_Name, new Font("微软雅黑", 12, FontStyle.Regular), new SolidBrush(Color.Black), 1, 1, new StringFormat(StringFormatFlags.DirectionVertical));
                    }
                    else
                    {
                        e.Graphics.DrawString(areaBase.Area_Name, new Font("微软雅黑", 12, FontStyle.Regular), new SolidBrush(Color.Black), 1, this.Height - 70, new StringFormat(StringFormatFlags.DirectionVertical));
                    }                                      
                }
                else if (areaBase.AreaType == 4 || areaBase.AreaType == 5)
                {
                    
                    if(areaBase.AreaNo.Contains("MC1"))
                    {
                        if (areaBase.AreaNo.Contains("Z23-MC1"))
                        {
                            gr.DrawString(areaBase.Area_Name,
                            new Font("微软雅黑", 8F, FontStyle.Bold), Brushes.Black, new Point(0, 10));
                        }
                        else
                        {
                            gr.DrawString(areaBase.Area_Name,
                        new Font("微软雅黑", 8F, FontStyle.Bold), Brushes.Black, new Point(0, 10));
                        }                                                                       
                    }                                                                        
                    else
                    {                      
                        e.Graphics.DrawString(areaBase.Area_Name, new Font("微软雅黑", 9, FontStyle.Bold),
                        new SolidBrush(Color.Black), 0, 0, new StringFormat(StringFormatFlags.DirectionVertical));
                        Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                        gr.DrawRectangle(new Pen(Color.White, 2), rec);
                    }
                    
                }
                else if (areaBase.AreaType == 3)
                {
                    e.Graphics.DrawString(areaBase.Area_Name, new Font("微软雅黑", 9, FontStyle.Bold),
                        new SolidBrush(Color.Black), 0, 0, new StringFormat(StringFormatFlags.DirectionVertical));
                    Rectangle rec = new Rectangle(new Point(0, 0), new Size(this.Width, this.Height));
                    gr.DrawRectangle(new Pen(Color.White, 2), rec);
                }
            }
            catch (Exception er)
            {

            }
        }
        private bool WCUnitSaddle(AreaBase areaBase)
        {
            int count = 0;
            string unitNO = areaBase.AreaNo.Substring(0, 4);
            string unitFlag = areaBase.AreaNo.Substring(5, 2);
            string unitStock = unitNO + unitFlag;
            string sqlText = @"SELECT A.STOCK_NO STOCK_NO,B.COIL_NO COIL_NO, C.STOCK_STATUS STOCK_STATUS 
                               FROM UACS_LINE_SADDLE_DEFINE A LEFT JOIN UACS_LINE_EXIT_L2INFO B ON B.UNIT_NO= A.UNIT_NO AND B.SADDLE_L2NAME = A.SADDLE_L2NAME
                               LEFT JOIN UACS_YARDMAP_STOCK_DEFINE C ON C.STOCK_NO = A.STOCK_NO
                               WHERE A.STOCK_NO LIKE '%" + unitStock + "%'";
            using (IDataReader rdr = DB2Connect.DBHelper.ExecuteReader(sqlText))
            {
                while (rdr.Read())
                {
                    if (rdr["COIL_NO"] != System.DBNull.Value && rdr["STOCK_STATUS"].ToString() == "2")
                    {
                        count++;
                    }
                }
            }
            if (count >= 2)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool WRUnitSaddle(AreaBase areaBase)
        {
            int count = 0;
            string unitNO = areaBase.AreaNo.Substring(0, 4);
            string unitFlag = areaBase.AreaNo.Substring(5, 2);
            string unitStock = unitNO + unitFlag;
            string sqlText = @"SELECT A.STOCK_NO STOCK_NO,B.COIL_NO COIL_NO, C.STOCK_STATUS STOCK_STATUS 
                               FROM UACS_LINE_SADDLE_DEFINE A LEFT JOIN UACS_LINE_ENTRY_L2INFO B ON B.UNIT_NO= A.UNIT_NO AND B.SADDLE_L2NAME = A.SADDLE_L2NAME
                               LEFT JOIN UACS_YARDMAP_STOCK_DEFINE C ON C.STOCK_NO = A.STOCK_NO
                               WHERE A.STOCK_NO LIKE '%" + unitStock + "%'";
            using (IDataReader rdr = DB2Connect.DBHelper.ExecuteReader(sqlText))
            {
                while (rdr.Read())
                {
                    if (rdr["COIL_NO"] != System.DBNull.Value && rdr["STOCK_STATUS"].ToString() == "2")
                    {
                        count++;
                    }
                }
            }
            if(count >= 1)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        private void conArea_Click(object sender, EventArgs e)
        {
            if (areaBase.AreaNo.IndexOf("D171-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D171机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("06 D171机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D171-WR") > -1 && areaBase.AreaType == 5)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D171机组入口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("05 D171机组入口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D172-WR") > -1 && areaBase.AreaType == 5)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D172机组入口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("07 D172机组入口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D172-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D172机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("08 D172机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D173-WR") > -1 && areaBase.AreaType == 5)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D173机组入口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("09 D173机组入口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D173-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D173机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("10 D173机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D174-WR") > -1 && areaBase.AreaType == 5)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D174机组入口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("11 D174机组入口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D174-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D174机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("20 D174包装线机组");
                }
            }
            if (areaBase.AreaNo.IndexOf("D108-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D108机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("04 D108机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D112-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D112机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("13 D112机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D112-EL") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D112机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("13 D112机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D208-WC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D208机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("12 D208机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D208-EL") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D208机组出口跟踪画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("12 D208机组出口");
                }
            }
            if (areaBase.AreaNo.IndexOf("D173-PR") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到Z21跨离线包装画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("15 Z21跨离线包装");
                }
            }
            if (areaBase.AreaNo.IndexOf("D173-PC") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到21跨拆包区画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("21 Z21跨拆包");
                }
            }
            if (areaBase.AreaNo.IndexOf("D172-PR") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到Z22跨离线包装画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("16 Z22跨离线包装");
                }
            }
            if (areaBase.AreaNo.IndexOf("D112-PR2") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到Z23跨离线包装画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("17 Z23跨离线包装");
                }
            }
            if (areaBase.AreaNo.IndexOf("D172-PC") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到22跨拆包区画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("22 Z22跨拆包");
                }
            }
            if (areaBase.AreaNo.IndexOf("D174-PC") > -1 && areaBase.AreaType == 3)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到23跨拆包区画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("23 Z23跨拆包");
                }
            }
            if (areaBase.AreaNo.IndexOf("MC") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到过跨台车画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("14 过跨台车");
                }
            }
            if (areaBase.AreaNo.IndexOf("PA-1") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到连退包装线机组画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("18 连退包装线机组");
                }
            }
            if (areaBase.AreaNo.IndexOf("PA-2") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到镀锌包装线机组画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("19 镀锌包装线机组");
                }
            }
            if (areaBase.AreaNo.IndexOf("PA-6") > -1 && areaBase.AreaType == 4)
            {
                MessageBoxButtons btn = MessageBoxButtons.OKCancel;
                DialogResult dr = MessageBox.Show("确定要切换到D174包装线机组画面吗？", "操作提示", btn);
                if (dr == DialogResult.OK)
                {
                    auth.OpenForm("20 D174包装线机组");
                }
            }
            
            if (areaBase.AreaType == 0||(areaBase.AreaType == 3 && areaBase.AreaNo.Contains("WJ")))
            {
                if (frmSaddleShow == null || frmSaddleShow.IsDisposed)
                {
                    frmSaddleShow = new FrmSaddleShow();
                    frmSaddleShow.AreaBase = areaBase;
                    frmSaddleShow.Show();
                }
                else
                {
                    frmSaddleShow.WindowState = FormWindowState.Normal;
                    frmSaddleShow.Activate();
                }
            }
        }

        public int  getRowNum(string _AreaNo)
        {
            int RowNum = 0;
            switch (areaBase.AreaNo)
            {
                case "Z02-A":
                    RowNum = 19;
                    break;
                case "Z02-B":
                    RowNum = 19;
                    break;
                case "Z03-A":
                    RowNum = 30;
                    break;
                case "Z03-B":
                    RowNum = 30;
                    break;
                case "Z03-C":
                    RowNum = 4;
                    break;
                case "Z04-A":
                    RowNum = 19;
                    break;
                case "Z04-B":
                    RowNum = 19;
                    break;
                case "Z05-A":
                    RowNum = 27;
                    break;
                case "Z05-B":
                    RowNum = 27;
                    break;
                default:
                    break;

            }
            return RowNum;
        }
    }
}
